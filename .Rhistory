bc[,valid:=T]
bc[,winner:=F]
bc[,dval:=votes]
bc[,holder := cname]
setkey(bc,cname) #faster lookups
ptot[,ols:=0]
ptot[,fakeols:=0]
}
oneNextHolder = function(orig,cur,el) {
relevant = fakeprefs[orig,]
if (orig==cur) {
num=0
} else {
num = relevant[forwhom==cur,n]
}
rows = relevant[n>num,]
for (i in 1:dim(rows)[1]) {
if (el[cname==rows[i,forwhom],valid]) {
return(rows[i,forwhom])
}
}
return("") #exhausted
}
nextHolder = function(orig, cur, el) {
return(mapply(oneNextHolder,force(orig),cur,el))
}
moveDel = function(name,el=bc) {
rows = el[holder==name,which=T]
for (row in rows) {
el[row,holder:=oneNextHolder(el[row,cname],name,el)]
}
}
moveOl = function(name,cparty,el=bc,ptot=ptots,passon=1) {
frac = sum(bc[party==cparty & valid==T,ppart])
extra = passon * (fakeols * el[cname==name,ppart]   #second-hand ols
+ el[cname==name,ol]) #first-hand ols
ptot[cparty,c("fracleft","ols") := list(frac,
ols + extra)]
if (frac!=0) {
ptot[cparty,fakeols:=fakeols+extra/frac]
}
}
elim = function(name,el=bc,ptot=ptots) {
print("ELIM!")
print(name)
cparty = el[cname==name,party]
print(cparty)
el[cname==name,c("valid","dval"):=list(F,delegated)]
#print(el[cname==name,list(name,valid)])
moveOl(name,cparty,el,ptot)
moveDel(name,el)
el[holder==name,holder:=nextHolder(cname,name,el)] #move the delegated
}
elect = function(name,votes,el=bc,ptot=ptots) {
if (is.na(votes)) {
stop("VOTES IS NA")
}
passon = max(0,(votes-quota)/quota)
el[cname==name,c("winner","valid"):=list(T,F)] #is winner, is not in running
cparty = el[cname==name,party]
moveOl(name,cparty,el,ptot,passon)
el[holder==name,dval:=dval * passon] #reduce the delegated
moveDel(name,el)
return(sum(el[,winner]))
}
getTots = function(el=bc,ptot=ptots) {
del = el[,list(dels=sum(dval)),by=holder]
if (dim(del[is.na(dels),])[1] > 0) {
print(del[is.na(dels),holder])
}
ol = el[valid==T,list(holder=cname,ols=ptot[party,fakeols] * ppart)]
if (dim(ol[is.na(ols),])[1] > 0) {
print(ol[is.na(ols),holder])
}
cat("del",dim(del),"ol",dim(ol),";")
setkey(del,holder)
setkey(ol,holder)
both = ol[del]
tots = both[,list(cname=holder,tot=ols+dels)]
tots = tots[cname!="",]
setkey(tots,tot)
return(tots)
}
runElection = function(el=bc,ptot=ptots) {
startElection(el,ptot)
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
cat("winners",dim(bc[winner==T,])[1],"livevotes",sum(ctots[,tot]))
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quota) {
cat("electing",ctots[biggest,cname],"\n")
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots)
moveOl = function(name,cparty,el=bc,ptot=ptots,passon=1) {
frac = sum(bc[party==cparty & valid==T,ppart])
if (frac==0) { frac = .0001 } # prevent divide-by-zero. Doesn't matter in this case.
extra = passon * (ptot[cparty,fakeols] * el[cname==name,ppart]   #second-hand ols
+ el[cname==name,ol]) #first-hand ols
ptot[cparty,c("fracleft","ols","fakeols") := list(frac,
ols + extra,fakeols+extra/frac)]
}
runElection(bc,ptots)
runElection(bc,ptots)
is1true = function(a) {
return(length(a)==1 & !is.na(a) & a)
}
oneNextHolder = function(orig,cur,el) {
relevant = fakeprefs[orig,]
if (orig==cur) {
num=0
} else {
num = relevant[forwhom==cur,n]
}
rows = relevant[n>num,]
for (i in 1:dim(rows)[1]) {
if (is1true(el[cname==rows[i,forwhom],valid])) {
return(rows[i,forwhom])
}
}
cat("exhausted",orig,"\n")
return("") #exhausted
}
elim = function(name,el=bc,ptot=ptots) {
#print("ELIM!")
#print(name)
cparty = el[cname==name,party]
#print(cparty)
el[cname==name,c("valid","dval"):=list(F,delegated)]
#print(el[cname==name,list(name,valid)])
moveOl(name,cparty,el,ptot)
moveDel(name,el)
el[holder==name,holder:=nextHolder(cname,name,el)] #move the delegated
}
elect = function(name,votes,el=bc,ptot=ptots) {
if (is.na(votes)) {
stop("VOTES IS NA")
}
passon = max(0,(votes-quota)/quota)
el[cname==name,c("winner","valid"):=list(T,F)] #is winner, is not in running
cparty = el[cname==name,party]
moveOl(name,cparty,el,ptot,passon)
el[holder==name,dval:=dval * passon] #reduce the delegated
moveDel(name,el)
return(sum(el[,winner]))
}
getTots = function(el=bc,ptot=ptots) {
del = el[,list(dels=sum(dval)),by=holder]
if (dim(del[is.na(dels),])[1] > 0) {
print(del[is.na(dels),holder])
}
ol = el[valid==T,list(holder=cname,ols=ptot[party,fakeols] * ppart)]
if (dim(ol[is.na(ols),])[1] > 0) {
print(ol[is.na(ols),holder])
}
cat("del",dim(del),"ol",dim(ol),";")
setkey(del,holder)
setkey(ol,holder)
both = ol[del]
tots = both[,list(cname=holder,tot=ols+dels)]
tots = tots[cname!="",]
setkey(tots,tot)
return(tots)
}
runElection = function(el=bc,ptot=ptots) {
startElection(el,ptot)
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
cat("winners",dim(bc[winner==T,])[1],"livevotes",sum(ctots[,tot]))
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quota) {
cat("electing",ctots[biggest,cname],"\n")
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots)
is1true = function(a) {
return(length(a)==1 && !is.na(a) && a)
}
is1true(c())
is1true(NA)
is1true(T)
is1true(1)
is1true = function(a) {
return(length(a)==1 && !is.na(a) && a==T)
}
runElection(bc,ptots)
table(bc[winner==T,party])
15+37+35
seats
quota
sum(bc[,votes])
sum(bc[,votes])/quota
runElection = function(el=bc,ptot=ptots) {
startElection(el,ptot)
plive = sum(el[,votes])
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
live=sum(ctots[,tot])
if (live > plive) {cat("LIVE", live, "PLIVE", plive, "\n")}
plive = live
cat("winners",dim(bc[winner==T,])[1],"livevotes",live)
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quota) {
cat("electing",ctots[biggest,cname],"\n")
plive = plive - quota
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots)
elect = function(name,votes,el=bc,ptot=ptots) {
if (is.na(votes)) {
stop("VOTES IS NA")
}
if (votes<quota) {
print("votes<quota")
print(votes)
}
passon = max(0,(votes-quota)/votes)
el[cname==name,c("winner","valid"):=list(T,F)] #is winner, is not in running
cparty = el[cname==name,party]
moveOl(name,cparty,el,ptot,passon)
el[holder==name,dval:=dval * passon] #reduce the delegated
moveDel(name,el)
return(sum(el[,winner]))
}
runElection = function(el=bc,ptot=ptots) {
startElection(el,ptot)
plive = sum(el[,votes])
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
live=sum(ctots[,tot])
if (live > plive) {cat("LIVE", live, "PLIVE", plive, "\n")}
plive = live
cat("winners",dim(bc[winner==T,])[1],"livevotes",live)
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quota) {
cat("electing",ctots[biggest,cname],"\n")
plive = plive - quota
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots)
dim(bc[winner,])
sum(ctots[,tot])
table(bc[winner==T,party])
runElection = function(el=bc,ptot=ptots,
preelim=.25,
quota=quota,seats=seats) {
preelim=preelim*quota*(seats+1)/seats
startElection(el,ptot)
plive = sum(el[,votes])
print("Pre-eliminations")
for (cand in el[votes<preelim,cname]) {
elim(cand,el,ptot)
}
print("Pre-eliminations DONE")
print()
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
live=sum(ctots[,tot])
if (live > plive) {cat("LIVE", live, "PLIVE", plive, "\n")}
plive = live
quota=live/(seats+1)
cat("winners",dim(bc[winner==T,])[1],"livevotes",live)
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quota) {
cat("electing",ctots[biggest,cname],"\n")
plive = plive - quota
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots,0)
elect = function(name,votes,el=bc,ptot=ptots, quot=quota) {
if (is.na(votes)) {
stop("VOTES IS NA")
}
if (votes<quot) {
print("votes<quota")
print(votes)
}
passon = max(0,(votes-quot)/votes)
el[cname==name,c("winner","valid"):=list(T,F)] #is winner, is not in running
cparty = el[cname==name,party]
moveOl(name,cparty,el,ptot,passon)
el[holder==name,dval:=dval * passon] #reduce the delegated
moveDel(name,el)
return(sum(el[,winner]))
}
getTots = function(el=bc,ptot=ptots) {
del = el[,list(dels=sum(dval)),by=holder]
if (dim(del[is.na(dels),])[1] > 0) {
print(del[is.na(dels),holder])
}
ol = el[valid==T,list(holder=cname,ols=ptot[party,fakeols] * ppart)]
if (dim(ol[is.na(ols),])[1] > 0) {
print(ol[is.na(ols),holder])
}
cat("del",dim(del),"ol",dim(ol),";")
setkey(del,holder)
setkey(ol,holder)
both = ol[del]
tots = both[,list(cname=holder,tot=ols+dels)]
tots = tots[cname!="",]
setkey(tots,tot)
return(tots)
}
runElection = function(el=bc,ptot=ptots,
preelim=.25,
quot=quota,seat=seats) {
preelim=preelim*quot*(seat+1)/seat
startElection(el,ptot)
plive = sum(el[,votes])
print("Pre-eliminations")
for (cand in el[votes<preelim,cname]) {
elim(cand,el,ptot)
}
print("Pre-eliminations DONE")
print()
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
live=sum(ctots[,tot])
if (live > plive) {cat("LIVE", live, "PLIVE", plive, "\n")}
plive = live
quot=live/(seat+1)
cat("winners",dim(bc[winner==T,])[1],"livevotes",live)
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quot) {
cat("electing",ctots[biggest,cname],"\n")
plive = plive - quot
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot,quot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots,0)
runElection = function(el=bc,ptot=ptots,
preelim=.25,
quot=quota,seat=seats) {
preelim=preelim*quot*(seat+1)/seat
startElection(el,ptot)
plive = sum(el[,votes])
print("Pre-eliminations")
for (cand in el[votes<preelim,cname]) {
elim(cand,el,ptot)
}
print("Pre-eliminations DONE")
print("")
while (T) {
if (sum(el[,winner]) >= seats) {
print("Stopping - done")
break
}
if (sum(el[,valid]) < 1) {
print("Stopping - error, no valid cands")
break
}
ctots = getTots(el,ptot)
live=sum(ctots[,tot])
if (live > plive) {cat("LIVE", live, "PLIVE", plive, "\n")}
plive = live
quot=live/(seat+1)
cat("winners",dim(bc[winner==T,])[1],"livevotes",live)
print(dim(ctots))
if (sum(ctots[,tot]) < quota) {
print("Stopping - exhausted ballots")
break
}
biggest = dim(ctots)[1]
if (ctots[biggest,tot] > quot) {
cat("electing",ctots[biggest,cname],"\n")
plive = plive - quot
elect(ctots[biggest,cname],ctots[biggest,tot],el,ptot,quot)
} else {
cat("elim",ctots[1,cname],"\n")
elim(ctots[1,cname],el,ptot)
}
}
print("")
print("")
print(el[winner==T,list(cname,party,riding)])
}
runElection(bc,ptots,0)
if (live > plive) {cat("LIVE", live, "PLIVE", plive, "\n")}
nopre = bc[winner==T,]
table(bc[winner==T,party])
runElection(bc,ptots,0.25)
table(bc[winner==T,party])
quota
bc[winner==T,list(cname,party,votes)]
bc[party=="Independent",list(cname,party,votes)]
table(bc[winner==T,party])
table(bc[votes>quota/4,party])
